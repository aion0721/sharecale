{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","20201211","holiday","txt","typeValue","item","setItem","typeValueCategory","showContent","date","returnTemp","getFormatDate","showTypeValue","getFullYear","getMonth","slice","getDate","Date","value","Container","tileClassName","tileContent","height","width","src","process","onChange","e","tmpTypeValue","day","console","log","onClick","event","Button","variant","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAgHeA,MA1Gf,WAAgB,IAAD,EACaC,mBAAS,CAACC,SAAS,CAACC,SAAQ,EAAKC,IAAI,QAAQC,UAAU,KADpE,mBACLC,EADK,KACCC,EADD,KAEPC,EAAoB,CAAC,GAAG,KAAM,KAAM,aAkD1C,SAASC,EAAYC,GACnB,IAAIC,EAAW,GAaf,OAZGL,EAAKM,EAAcF,MACjBJ,EAAKM,EAAcF,IAAON,MACzBO,GAA0BL,EAAKM,EAAcF,IAAON,KAKrDE,EAAKM,EAAcF,IAAOL,YAC3BM,GAA0BH,EAAkBF,EAAKM,EAAcF,IAAOL,aAInEM,EAGT,SAASE,EAAcH,GACrB,OAAGJ,EAAKM,EAAcF,IACjBJ,EAAKM,EAAcF,IAAOL,UACpBG,EAAkBF,EAAKM,EAAcF,IAAOL,gBADrD,EAIO,KAKV,SAASO,EAAcF,GACtB,MAAM,GAAN,OAAUA,EAAKI,eAAf,QAAgC,KAAOJ,EAAKK,WAAa,IAAIC,OAAO,IAApE,QAA0E,IAAMN,EAAKO,WAAWD,OAAO,IAjF5F,MAqFef,mBAAS,IAAIiB,MArF5B,mBAqFLC,EArFK,KAsFb,OAtFa,KAuFX,8BACE,eAACC,EAAA,EAAD,WACA,cAAC,IAAD,CAGAC,cAAe,gBAAEX,EAAF,EAAEA,KAAF,OAAWJ,EAAKM,EAAcF,KAAUJ,EAAKM,EAAcF,IAAOP,QAAU,UAAY,MAEvGmB,YAAa,gBAAEZ,EAAF,EAAEA,KAAF,OAAW,8BAAG,qBAAKa,OAAO,MAAMC,MAAM,MAAMC,IAAK,UAAGC,aAAH,KAA+Bb,EAAcH,GAA7C,SAA+DD,EAAYC,OACzIiB,SAjFJ,SAAyBC,GACvB,IACIC,EADEC,EAAMlB,EAAcgB,GAG1B,GAAGtB,EAAKM,EAAcgB,IACtB,OAAOtB,EAAKM,EAAcgB,IAAIvB,WAC5B,KAAK,EACHwB,EAAe,EACf,MAEF,KAAK,EACHA,EAAe,EACf,MAEF,KAAK,EACHA,EAAe,EACf,MAEF,QACEA,EAAe,OAKnBA,EAAc,EAGdtB,EAAQ,2BACHD,GADE,kBACIwB,EAAK,CACZzB,UAAUwB,MAGdE,QAAQC,IAAI1B,IAkDVa,MAAOA,IACP,wBAAQc,QAAS,SAAAC,GAAK,OAAKH,QAAQC,IAAI1B,EAAK,YAA5C,eACF,cAAC6B,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAlC,wBC5FWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a5d44f54.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Calendar from 'react-calendar'\nimport './Top.css'\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\n\nfunction App() {\n  const [ item, setItem ] = useState({20201211:{holiday:true,txt:'aiueo',typeValue:1}});\n  const typeValueCategory = [\"\",\"OK\", \"NG\", \"undecided\"] \n\n  function showParams(e){\n    const day = getFormatDate(e)\n    setItem({\n      ...item,[day]:{\n        holiday:true,\n      }\n    })\n    console.log(e)\n  }\n\n  function changeTypeValue(e){\n    const day = getFormatDate(e)\n    let tmpTypeValue\n\n    if(item[getFormatDate(e)]){\n    switch(item[getFormatDate(e)].typeValue){\n      case 1: {\n        tmpTypeValue = 2;\n        break\n      }\n      case 2:{\n        tmpTypeValue = 3\n        break;\n      }\n      case 3:{\n        tmpTypeValue = 1\n        break;\n      }\n      default: {\n        tmpTypeValue = 0\n        break;\n      }\n    }\n  }else{\n    tmpTypeValue =1;\n  }\n    \n    setItem({\n      ...item,[day]:{\n        typeValue:tmpTypeValue\n      }\n    })\n    console.log(item)\n  }\n  function setTxtValue(e){\n    const day = getFormatDate(e)\n  }\n\n  function showContent(date){\n    let returnTemp=\"\"\n    if(item[getFormatDate(date)]){\n      if(item[getFormatDate(date)].txt){\n          returnTemp = returnTemp + item[getFormatDate(date)].txt\n      //  return item[getFormatDate(date)].txt\n      }else{\n      //  return null;\n      }\n      if(item[getFormatDate(date)].typeValue){\n        returnTemp = returnTemp + typeValueCategory[item[getFormatDate(date)].typeValue]\n      }\n    }\n\n    return returnTemp;\n  }\n\n  function showTypeValue(date){\n    if(item[getFormatDate(date)]){\n      if(item[getFormatDate(date)].typeValue){\n        return typeValueCategory[item[getFormatDate(date)].typeValue]\n      }\n    }else{\n      return \"OK\"\n    }\n  }\n\n   // state の日付と同じ表記に変換\n   function getFormatDate(date) {\n    return `${date.getFullYear()}${('0' + (date.getMonth() + 1)).slice(-2)}${('0' + date.getDate()).slice(-2)}`;\n  }\n  function showTile(e){\n  }\n  const [ value, onChange ] = useState(new Date());\n  return (\n    <div>\n      <Container>\n      <Calendar \n      //tileClassName={({date}) => item[getFormatDate(date)] === true ? 'holiday' : null}\n      //tileContent={({ activeStartDate, date, view }) => view === 'month' && date.getDay() === 0 ? <p>It's Sunday!</p> : null}\n      tileClassName={({date}) =>item[getFormatDate(date)] && item[getFormatDate(date)].holiday ? 'holiday' : null}\n      //tileContent={({date}) =><p>{item[getFormatDate(date)] && item[getFormatDate(date)].txt ? item[getFormatDate(date)].txt : null}</p>}\n      tileContent={({date}) =><p><img height=\"100\" width=\"100\" src={`${process.env.PUBLIC_URL}/` + showTypeValue(date) + `.png`}/>{showContent(date)}</p>}\n      onChange={changeTypeValue}\n      value={value}/>\n      <button onClick={event => (console.log(item['20201211']))}>a</button>\n    <Button variant=\"contained\" color=\"primary\">\n      Test\n    </Button>\n    </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}